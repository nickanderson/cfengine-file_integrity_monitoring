body file control
{
  inputs => {
              "$(sys.libdir)/files.cf",
            };
}

bundle agent FIM_tag_subscribe_all_changes
{
  meta:
    "description" string => "Inventory and monitor any filepath tagged with FIM=all_changes";
    "authors" slist => { "Nick Anderson <nick@cmdln.org>" };

  vars:

    "files_to_monitor"
      slist => variablesmatching(".*", "FIM=all_changes");

    # Note: I am using fileexists twice here, probably it would be more
    # efficient to define a class for each of these and then just use the
    # class. I have chosen not to do that as I think that it would be better to
    # remove the fileexists restriction. With it in place we get no
    # notification when a file goes missing. It is in place however to suppress
    # the error message printed when the file is not present. This message
    # spams logs and should probably be moved to verbose or debug level output.
    "monitor[$(files_to_monitor)]"
      string => "$($(files_to_monitor))",
      ifvarclass => fileexists("$($(files_to_monitor))"),
      meta => { "inventory", "attribute_name=File Integrity Monitor All Changes" };

  files:

    "$($(files_to_monitor))"
      handle => "FIM_tag_subscribe_monitor_$(files_to_monitor)_all_changes",
      changes => all_changes,
      comment => "Monitoring $($(files_to_monitor)) for all changes",
      ifvarclass => fileexists("$($(files_to_monitor))"); # This restriction
                                                          # suppresses errors about trying to promise to monitor a file for changes that
                                                          #does not exist. Would it be more efficient to use $(this.promiser) here?

reports:
  DEBUG|DEBUG_FIM_tag_subscribe_all_changes::
    "DEBUG $(this.bundle): Found variable '$(files_to_monitor)' containing path '$($(files_to_monitor))' subscribing to all_changes file integrity monitor";
}
